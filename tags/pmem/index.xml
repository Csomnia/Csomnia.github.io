<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PMEM on CRQ's Blog</title><link>/tags/pmem/</link><description>Recent content in PMEM on CRQ's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 17 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/pmem/index.xml" rel="self" type="application/rss+xml"/><item><title>AEP入门指北</title><link>/posts/aep-tutorial/</link><pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate><guid>/posts/aep-tutorial/</guid><description>[TOC]
简介 用了一段时间AEP了，现在写一个材料给大家分享一下，从零开始的AEP入门。
AEP 与 CPU 的 iMC 相连需要 CPU 使用 load/store 指令进行读写，load/store 指令往往就牵扯到 CPU 的 memory-model，再加上使用 AEP 的时候往往是希望利用其持久化的特性的，所以要做到一个正确的设计就首先需要对CPU的memory-model（或者说指令顺序及效果）有个基本的认识。
同时目前 Intel 的 AEP 实现也相对比较复杂，看起来是只是一个新介质，但实际上是一个复合的存储系统，所以要做到一个高性能的设计还需要对 AEP 本身的架构以及内核是如何进行有一个基本的认识。
因此AEP实际上是一个比较综合的话题，我过去几个月中阅读了一些相关的资料，发现很多资料对于小白也不够友好（因为当时我也是小白），同时也结合一些我的心得，打算系统的分享出来。
整体分成下面几块
如何持久化的把一块数据写到内存
在这个部分，先以抽象的方式假设有一段内存地址提供持久化功能，讨论如何写入一条记录，主要目的是引入memory-model相关的话题（cache结构、指令顺序）。为什么先假设有一段内存地址是持久化的，主要是想说明这部分复杂度是由于CPU本身造成的，与AEP本身的硬件无关。
结合CPU内存模型简单介绍一下如何写一段数据到内存 真正的持久化内存
通过第一部分，已经了解了一般化的如何持久化的写一条记录，在这一部分，会从最底层介质颗粒开始逐渐向上，介绍AEP的结构以及如何与系统集成的，也介绍了一些必要的特性，比如掉电保护、Interleave。对AEP结构的了解有利于理解AEP一些性能优化的方式。
从介质开始简单介绍一下 AEP 100系列的硬件架构，及其特性 如何使用持久化内存
其实AEP用起来还是蛮简单的，在这个部分我们先介绍AEP给我们提供的使用模式，以及如何通过命令行初始化一个AEP创建文件系统，同时也介绍了一下Intel提供的PMDK工具包的功能。
简介DAX，简述一下一个fs-dax是怎么写入AEP的 简单介绍一下PMDK是啥，各个库大概干啥的 心得&amp;amp;杂记
这个部分就是介绍一下RPMA，介绍一下性能优化的考虑，以及简单介绍一下之前有个AEP的比赛
简单介绍一下RDMA配合AEP使用的情况 简单介绍一下性能考虑 比赛 水平有限且有的地方写的确实不严谨，欢迎提出任何意见
如何持久化的把一块数据写到内存 那么我们现在假设有一段内存（地址）拥有持久化的能力（假设你能获得物理地址或者说不考虑虚拟内存，且写在 Cache 中不算写入内存）。
我们想要存储一段数据，最简单的方案就是直接 copy，如下</description></item></channel></rss>